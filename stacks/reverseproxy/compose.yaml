networks:
  proxy:
    external: true
services:
  # Traefik configuration
  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    depends_on:
      - authelia
    networks:
      proxy:
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "443:443/udp"
    environment:
      CF_API_EMAIL: ${email}
      CF_DNS_API_TOKEN: ${cf_api_key}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $data/traefik/traefik.yml:/traefik.yml:ro
      - $data/traefik/dynamic.yml:/dynamic.yml:ro
      - $data/traefik/acme.json:/acme.json
      - $data/logs/traefik:/var/log/traefik:rw
    labels:
      traefik.enable: 'true'
      traefik.http.routers.traefik.entryPoints: 'https'
      traefik.http.routers.traefik.rule: 'Host(`tf.${domain}`) || Host(`tf.${local_domain}`)'
      traefik.http.routers.traefik.tls.certresolver: 'cloudflare'
      traefik.http.services.traefik.loadbalancer.server.url: 'http://traefik:8080'
      traefik.http.routers.traefik.middlewares: 'localonly@file'
      traefik.http.routers.api.tls: 'true'
      traefik.http.routers.api.service: 'api@internal'

  # Crowdsec configuration
  crowdsec:
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      proxy:
    environment:
      GID: ${GID:-1000}
      COLLECTIONS: "crowdsecurity/linux crowdsecurity/traefik"
    volumes:
      - $data/crowdsec/db:/var/lib/crowdsec/data/
      - $data/crowdsec/config:/etc/crowdsec/
      - $data/logs/traefik:/var/log/traefik/:ro
  bouncer-traefik:
    image: docker.io/fbonalair/traefik-crowdsec-bouncer
    container_name: bouncer-traefik
    restart: unless-stopped
    depends_on:
      - crowdsec
    networks:
      proxy:
    environment:
      CROWDSEC_BOUNCER_API_KEY: ${cs_api_key}
      CROWDSEC_AGENT_HOST: crowdsec:8080

  # Authelia configuration
  authelia:
    image: authelia/authelia
    container_name: authelia
    restart: unless-stopped
    depends_on:
      - lldap
    networks:
      proxy:
    environment:
      - TZ=${TZ:-UTC}
      - X_AUTHELIA_CONFIG_FILTERS=template
      - X_AUTHELIA_CONFIG=/config/configuration.yml
    volumes:
      - $data/authelia/config:/config
    labels:
      traefik.enable: 'true'
      traefik.http.routers.authelia.rule: 'Host(`auth.${domain}`)'
      traefik.http.routers.authelia.entryPoints: 'https'
      traefik.http.routers.authelia.tls: 'true'
      traefik.http.routers.api.middlewares: 'authelia@docker'
      traefik.http.middlewares.authelia.forwardAuth.address: 'http://authelia:9091/api/authz/forward-auth'
      traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: 'true'
      traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Email,Remote-Name'
  lldap:
    image: lldap/lldap:stable
    container_name: lldap
    networks:
      proxy:
    environment:
      UID: ${UID:-1000}
      GID: ${GID:-1000}
      TZ: ${TZ:-UTC}
      LLDAP_JWT_SECRET: '${LLDAP_JWT_SECRET}'
      LLDAP_KEY_SEED: '${LLDAP_KEY_SEED}'
      LLDAP_LDAP_BASE_DN: 'dc=${second_level_domain},dc=${tld}'
    volumes:
      - $data/lldap:/data
    labels:
      traefik.enable: 'true'
      traefik.http.routers.lldap.rule: 'Host(`lldap.${domain}`)'
      traefik.http.routers.lldap.middlewares: 'localonly@file'
      traefik.http.routers.lldap.entryPoints: 'https'
      traefik.http.routers.lldap.tls: 'true'
      traefik.http.services.lldap.loadbalancer.server.port: 17170
