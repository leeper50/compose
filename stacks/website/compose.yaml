networks:
  mywebsite: null
  freshrss: null
  proxy:
    external: true
services:
  mywebsite:
    image: dellhplaptop/newwebsite:${mywebsite_version:-latest}
    container_name: mywebsite
    restart: always
    networks:
      proxy:
    volumes:
      - ${data:-.}/newweb/db:/app/db
    labels:
      traefik.enable: "true"
      traefik.http.routers.mywebsite.entryPoints: "https"
      traefik.http.routers.mywebsite.rule: "Host(`${domain}`) || Host(`www.${domain}`)"
      traefik.http.routers.mywebsite.tls.certresolver: "cloudflare"
      traefik.http.services.mywebsite.loadbalancer.server.url: "http://mywebsite:8080"
  freshrss:
    image: freshrss/freshrss:${freshrss_version:-latest}
    container_name: freshrss
    restart: always
    depends_on:
      - freshrssdb
    networks:
      proxy:
      freshrss:
    logging:
      options:
        max-size: 10m
    volumes:
      - ${data:-.}/rss/data:/var/www/FreshRSS/data
      - ${data:-.}/rss/extensions:/var/www/FreshRSS/extensions
    environment:
      TZ: ${timezone:-UTC}
      TRUSTED_PROXY: 0
      LISTEN: 0.0.0.0:80
      CRON_MIN: "1,31"
    labels:
      traefik.enable: "true"
      traefik.http.routers.freshrss.entryPoints: "https"
      traefik.http.routers.freshrss.rule: "Host(`rss.${domain}`)"
      traefik.http.routers.freshrss.tls.certresolver: "cloudflare"
      traefik.http.services.freshrss.loadbalancer.server.url: "http://freshrss:80"
  freshrssdb:
    image: postgres:${postgres_version:-16}
    container_name: freshrssdb
    restart: always
    networks:
      freshrss:
    volumes:
      - ${data:-.}/rss/db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: rss
      POSTGRES_PASSWORD: ${DB_PASSWORD}
  vaultwarden:
    image: vaultwarden/server:${vaultwarden_version:-latest}
    container_name: vaultwarden
    restart: always
    networks:
      proxy:
    environment:
      DOMAIN: https://vault.${domain}
      ADMIN_TOKEN: "${vaultwarden_admin_token}"
    volumes:
      - ${data:-.}/vault/data:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.vaultwarden.entryPoints: "https"
      traefik.http.routers.vaultwarden.rule: "Host(`vault.${domain}`)"
      traefik.http.routers.vaultwarden.tls.certresolver: "cloudflare"
      traefik.http.services.vaultwarden.loadbalancer.server.url: "http://vaultwarden:80"
  homepage:
    image: ghcr.io/gethomepage/homepage:${homepage_version:-latest}
    container_name: homepage
    restart: always
    networks:
      proxy:
    environment:
      TZ: ${timezone:-UTC}
      HOMEPAGE_ALLOWED_HOSTS: home.${domain}
    volumes:
      - ${data:-.}/homepage:/app/config:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      traefik.enable: "true"
      traefik.http.routers.homepage.entryPoints: "https"
      traefik.http.routers.homepage.middlewares: "localonly@file"
      traefik.http.routers.homepage.rule: "Host(`home.dellhplaptop.xyz`)"
      traefik.http.routers.homepage.tls.certresolver: "cloudflare"
      traefik.http.services.homepage.loadbalancer.server.url: "http://homepage:3000"
  copyparty:
    image: copyparty/iv:${copyparty_version:-latest}
    container_name: copyparty
    user: ${uid:-1000}:${gid:-1000}
    restart: unless-stopped
    networks:
      proxy:
    environment:
      LD_PRELOAD: /usr/lib/libmimalloc-secure.so.2
    volumes:
      - ${data:-.}/copyparty/conf:/cfg
      - ${data:-.}/copyparty/files:/w
    labels:
      traefik.enable: "true"
      traefik.http.routers.copyparty.entryPoints: "https"
      traefik.http.routers.copyparty.middlewares: "goodbois@file"
      traefik.http.routers.copyparty.rule: "Host(`files.${domain}`) || Host(`files.${local_domain}`)"
      traefik.http.routers.copyparty.tls.certresolver: "cloudflare"
      traefik.http.services.copyparty.loadbalancer.server.url: "http://copyparty:3923"
    stop_grace_period: 15s # thumbnailer is allowed to continue finishing up for 10s after the shutdown signal
    healthcheck:
      # hide it from logs with "/._" so it matches the default --lf-url filter
      test: ["CMD-SHELL", "wget --spider -q 127.0.0.1:3923/?reset=/._"]
      interval: 1m
      timeout: 2s
      retries: 5
      start_period: 15s
